Homework 2 Data Science 
By Mayank Sharma

Numpy Questions

1. Define two custom numpy arrays, say A and B. Generate two new numpy
arrays by stacking A and B vertically and horizontally.

Solution 1:

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8, 9], [10, 11, 12]])

vertical_stack = np.vstack((A, B))

horizontal_stack = np.hstack((A, B))

print("Vertical Stack:\n", vertical_stack)
print("Horizontal Stack:\n", horizontal_stack)

2. Find common elements between A and B. [Hint : Intersection of two sets]

Solution 2:

common_elements = np.intersect1d(A, B)

print("Common Elements:\n", common_elements)

3. Extract all numbers from A which are within a specific range. eg
between 5 and 10. [Hint: np.where() might be useful or boolean masks]

Solution 3:

range_elements = A[(A >= 5) & (A <= 10)]

print("Elements in the range [5, 10]:\n", range_elements)


4. Filter the rows of iris_2d that has petallength (3rd column) > 1.5
and sepallength (1st column) < 5.0
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

Solution 4:

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

filtered_iris = iris_2d[(iris_2d[:, 2] > 1.5) & (iris_2d[:, 0] < 5.0)]

print("Filtered rows based on conditions:\n", filtered_iris)


Pandas Questions

5. From df filter the 'Manufacturer', 'Model' and 'Type' for every
20th row starting from 1st (row 0).
```
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')
```
Solution 5:

import pandas as pd

# Load the dataset
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')

# Filter the desired columns and select every 20th row starting from 0
filtered_df = df[['Manufacturer', 'Model', 'Type']].iloc[::20]

print(filtered_df)


6. Replace missing values in Min.Price and Max.Price columns with
their respective mean.
```
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')
```

Solution 6:

# Load the dataset
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')

# Calculate the means of 'Min.Price' and 'Max.Price'
min_price_mean = df['Min.Price'].mean()
max_price_mean = df['Max.Price'].mean()

# Replace missing values with the means
df['Min.Price'].fillna(min_price_mean, inplace=True)
df['Max.Price'].fillna(max_price_mean, inplace=True)

print("Missing values replaced with means:")
print(df[['Min.Price', 'Max.Price']].head())

7. How to get the rows of a dataframe with row sum > 100?
```
df = pd.DataFrame(np.random.randint(10, 40, 60).reshape(-1, 4))


Solution 7:

# Generate a random dataframe
import numpy as np
df = pd.DataFrame(np.random.randint(10, 40, 60).reshape(-1, 4))

# Get rows where the sum of the row values is greater than 100
rows_with_sum_gt_100 = df[df.sum(axis=1) > 100]

print("Rows with row sum > 100:")
print(rows_with_sum_gt_100)

